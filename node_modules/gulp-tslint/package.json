{
  "_args": [
    [
      {
        "raw": "gulp-tslint@8.1.0",
        "scope": null,
        "escapedName": "gulp-tslint",
        "name": "gulp-tslint",
        "rawSpec": "8.1.0",
        "spec": "8.1.0",
        "type": "version"
      },
      "/Users/altus/Projects/a/js-helper"
    ]
  ],
  "_from": "gulp-tslint@8.1.0",
  "_id": "gulp-tslint@8.1.0",
  "_inCache": true,
  "_location": "/gulp-tslint",
  "_nodeVersion": "6.4.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/gulp-tslint-8.1.0.tgz_1495556799175_0.3147726992610842"
  },
  "_npmUser": {
    "name": "nawitus",
    "email": "panu.horsmalahti@iki.fi"
  },
  "_npmVersion": "3.10.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "gulp-tslint@8.1.0",
    "scope": null,
    "escapedName": "gulp-tslint",
    "name": "gulp-tslint",
    "rawSpec": "8.1.0",
    "spec": "8.1.0",
    "type": "version"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "http://npm.manalto.net/gulp-tslint/-/gulp-tslint-8.1.0.tgz",
  "_shasum": "80ebc786b8472438e39fa831686e31a4e5bf3949",
  "_shrinkwrap": null,
  "_spec": "gulp-tslint@8.1.0",
  "_where": "/Users/altus/Projects/a/js-helper",
  "analyze": true,
  "author": {
    "name": "Panu Horsmalahti",
    "email": "panu.horsmalahti@iki.fi"
  },
  "bugs": {
    "url": "https://github.com/panuhorsmalahti/gulp-tslint/issues"
  },
  "contributors": [
    {
      "name": "Panu Horsmalahti",
      "email": "panu.horsmalahti@iki.fi"
    }
  ],
  "dependencies": {
    "@types/gulp-util": "^3.0.31",
    "@types/node": "^7.0.18",
    "@types/through": "0.0.28",
    "gulp-util": "~3.0.8",
    "map-stream": "~0.0.7",
    "through": "~2.3.8"
  },
  "description": "TypeScript linter Gulp plugin",
  "devDependencies": {
    "gulp": "^3.9.1",
    "gulp-concat": "^2.6.1",
    "gulp-typescript": "^3.1.6",
    "tslint": "^5",
    "typescript": "^2"
  },
  "directories": {},
  "dist": {
    "shasum": "80ebc786b8472438e39fa831686e31a4e5bf3949",
    "tarball": "http://npm.manalto.net/gulp-tslint/-/gulp-tslint-8.1.0.tgz"
  },
  "engines": {
    "node": ">= 4"
  },
  "gitHead": "6042908c7c01433c24571228c4cc520b8f664440",
  "homepage": "https://github.com/panuhorsmalahti/gulp-tslint",
  "keywords": [
    "gulp",
    "typescript",
    "plugin",
    "ts",
    "gulpplugin",
    "gulpfriendly",
    "tslint",
    "linter",
    "lint"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "nawitus",
      "email": "panu.horsmalahti@iki.fi"
    }
  ],
  "name": "gulp-tslint",
  "optionalDependencies": {},
  "peerDependencies": {
    "tslint": ">=5.0.0-dev"
  },
  "preferGlobal": false,
  "readme": "gulp-tslint\r\n===========\r\n\r\n[![Build Status](https://travis-ci.org/panuhorsmalahti/gulp-tslint.svg?branch=master)](https://travis-ci.org/panuhorsmalahti/gulp-tslint)\r\n[![Dependency Status](https://david-dm.org/panuhorsmalahti/gulp-tslint.svg)](https://david-dm.org/panuhorsmalahti/gulp-tslint)\r\n\r\nTypeScript linter plugin for Gulp.\r\n\r\n\r\nFirst install gulp-tslint\r\n```shell\r\nnpm install --save-dev gulp-tslint\r\n```\r\n\r\n##### Peer dependencies\r\n\r\nThe `tslint` module is a peer dependency of `gulp-tslint`, which allows you to update tslint independently from gulp-tslint. gulp-tslint requires TypeScript version >=2 and tslint version >=4.\r\n\r\nUsage:\r\n```javascript\r\n// Importing in ES6\r\nimport tslint from \"gulp-tslint\";\r\n\r\n// or requiring in ES5\r\nvar tslint = require(\"gulp-tslint\");\r\n\r\ngulp.task(\"tslint\", () =>\r\n    gulp.src(\"source.ts\")\r\n        .pipe(tslint({\r\n            formatter: \"verbose\"\r\n        }))\r\n        .pipe(tslint.report())\r\n);\r\n```\r\n\r\nTypes should work automatically.\r\n\r\n**tslint.json** is attempted to be read from near the input file.\r\nIt **must be available** or supplied directly through the options.\r\n\r\nFailures generated by TSLint are added to `file.tslint`.\r\n\r\nThe format in which failures are outputted may be controlled by specifying a TSLint formatter.\r\nThe default formatter is \"prose\".\r\nThe available formatters include:\r\n\r\n* \"json\" prints stringified JSON to console.log.\r\n* \"prose\" prints short human-readable failures to console.log.\r\n* \"verbose\" prints longer human-readable failures to console.log.\r\n* \"msbuild\" for Visual Studio\r\n* \"vso\" outputs failures in a format that can be integrated with Visual Studio Online.\r\n* \"checkstyle\" for the Checkstyle development tool\r\n* \"pmd\" for the PMD source code analyzer\r\n* \"stylish\" human-readable formatter which creates stylish messages.\r\n\r\nCustom [TSLint formatters](https://palantir.github.io/tslint/develop/custom-formatters/) may also be\r\nused by specifying the `formatter` and `formattersDirectory` properties on the options passed to\r\n`gulp-tslint`.\r\n\r\nIf upgrading to gulp-tslint v6.0.0 or greater, it should be noted that reporters have been removed\r\nin favour of using TSLint formatters directly. If you were previously specifying a reporter in calls\r\nto `.report()`, these should be removed and instead `formatter` should be specified in calls to\r\n`gulp-tslint`.\r\n\r\nIf there is at least one failure a PluginError is emitted after execution of the reporters:\r\n```javascript\r\n[gulp] Error in plugin 'gulp-tslint': Failed to lint: input.ts\r\n```\r\n\r\nYou can prevent emiting the error by setting emitError in report options to false.\r\n\r\n```javascript\r\ngulp.task(\"invalid-noemit\", () =>\r\n    gulp.src(\"input.ts\")\r\n        .pipe(tslint({\r\n            formatter: \"prose\"\r\n        }))\r\n        .pipe(tslint.report({\r\n            emitError: false\r\n        }))\r\n);\r\n```\r\n\r\nYou can summarize the gulp error message to the number of errors by setting summarizeFailureOutput in report options.\r\n\r\n```javascript\r\ngulp.task(\"invalid-noemit\", () =>\r\n    gulp.src(\"input.ts\")\r\n        .pipe(tslint({\r\n            formatter: \"prose\"\r\n        }))\r\n        .pipe(tslint.report({\r\n            summarizeFailureOutput: true\r\n        }))\r\n);\r\n```\r\n\r\ntslint.json can be supplied as a parameter by setting the configuration property.\r\n```javascript\r\ngulp.task(\"tslint-json\", () =>\r\n    gulp.src(\"input.ts\")\r\n        .pipe(tslint({\r\n            configuration: {\r\n              rules: {\r\n                \"class-name\": true,\r\n                // ...\r\n              }\r\n            }\r\n        }))\r\n        .pipe(tslint.report())\r\n);\r\n```\r\n\r\nYou can also supply a file path to the configuration option, and the file name\r\ndoesn't need to be tslint.json.\r\n\r\n```javascript\r\n.pipe(tslint({\r\n    // contains rules in the tslint.json format\r\n    configuration: \"source/settings.json\"\r\n}))\r\n```\r\n\r\nReport limits\r\n-------------\r\n\r\nYou can optionally specify a report limit in the .report options that will turn off reporting for files after the limit has been reached. If the limit is 0 or less, the limit is ignored, which is the default setting.\r\n\r\n```javascript\r\ngulp.task(\"tslint\", () =>\r\n    gulp.src([\"input.ts\",])\r\n        .pipe(tslint({\r\n            formatter: \"prose\"\r\n        }))\r\n        .pipe(tslint.report({\r\n            reportLimit: 2\r\n        }))\r\n);\r\n```\r\n\r\nAllowing Warnings\r\n-----------------\r\n\r\nTSLint 5.0 introduced support for a \"warning\" severity for linting errors.  By default, warnings cause `gulp-tslint` to emit an error to maintain backwards-compatibility with previous versions.  To let the build succeed in the presence of warnings, use the `allowWarnings` report option.\r\n\r\n```javascript\r\ngulp.task(\"tslint\", () =>\r\n    gulp.src(\"input.ts\")\r\n        .pipe(tslint({\r\n            formatter: \"prose\"\r\n        }))\r\n        .pipe(tslint.report({\r\n            allowWarnings: true\r\n        }))\r\n);\r\n```\r\n\r\nSpecifying the tslint module\r\n----------------------------\r\n\r\nIf you want to use a different version of tslint, you can supply it with the `tslint` option.\r\n\r\n```bash\r\nnpm install tslint@next\r\n```\r\n\r\n```javascript\r\n.pipe(tslint({\r\n    tslint: require(\"tslint\")\r\n}));\r\n```\r\n\r\nType checked rules\r\n------------------\r\n\r\nType checked rules require a TypeScript program object to be provided to the linter in the options. For more information see tslint documentation.\r\n\r\n```javascript\r\nvar gulpTslint = require(\"gulp-tslint\");\r\nvar tslint = require(\"tslint\");\r\n\r\n// NOTE: Ensure 'Linter.createProgram' is called inside the gulp task else the contents of the files will be cached\r\n// if this tasks is called again (eg. as part of a 'watch' task).\r\ngulp.task('lint', function() {\r\nvar program = tslint.Linter.createProgram(\"./tsconfig.json\");\r\n\r\ngulp.src('src/**/*.ts', { base: '.' })\r\n  .pipe(gulpTslint({ program }))\r\n```\r\n\r\nAll default tslint options\r\n--------------------------\r\n\r\n```javascript\r\nconst tslintOptions = {\r\n    configuration: {},\r\n    fix: false,\r\n    formatter: \"prose\",\r\n    formattersDirectory: null,\r\n    rulesDirectory: null,\r\n    tslint: null,\r\n    program: null\r\n};\r\n```\r\n\r\nAll default report options\r\n--------------------------\r\n\r\n```javascript\r\nconst reportOptions = {\r\n    emitError: true,\r\n    reportLimit: 0,\r\n    summarizeFailureOutput: false,\r\n    allowWarnings: false\r\n};\r\n```\r\n\r\nDevelopment\r\n===========\r\n\r\nFork this repository, run npm install and send pull requests. The project can be build with ``gulp`` command.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/panuhorsmalahti/gulp-tslint.git"
  },
  "scripts": {},
  "typings": "index",
  "version": "8.1.0"
}
